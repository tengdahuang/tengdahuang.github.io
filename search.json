[{"title":"正则的一些笔记","path":"/2023/12/21/2023-js正则的一些笔记/","content":"Created: 2023-12-21Status: #H5&#x2F;js Recall:123456789101112131415161718192021222324252627282930313233343536373839404142434445464748/pattern/attributes正常会找第一个匹配的内容其中attribute包含 g,i,m 分别指 全局匹配、区分大小写、多行匹配[ab] = /a|b/[a-z]=任意小写字母[A-Z]=任意大写字母[A-z]=任意字母[0-9]=任意数字//检查一个字符串中是否有abc或adc或aecreg = /a[bde]c///[^]除了abreg = /[^ab]/;//test函数，测试字符串是否跟reg匹配var reg = /\\./console.log(reg.text(&quot;b.&quot;));//split 根据任意字母来拆分字符串，默认全局var result = str.split(/[A-z]/);//search 搜索匹配内容，只找出第一个var result = str.search(/a[bef]c/);//match 提取多个正则匹配(全局+忽略大小写)，封装到数组var result = str.matc(/[a-z]/gi);//replace 正则匹配进行替换var result = str.replace(/a/, &quot;@-@&quot;);//replace 删除字母var result = str.replace(/[a-z]/gi, &quot;&quot;);//&#123;n&#125;对前面的内容设置匹配出现次数var reg = /(ab)&#123;3&#125;/; // (ab)出现3次var reg = /ab&#123;3&#125;c/; // a和c中间有3个b//&#123;n1,n2&#125; 匹配n1到n2次// n+ 至少出现一个，相当于&#123;1,&#125;var reg = /ab+c/;// n* 0或多个，相当于&#123;0,&#125;var reg = /ab*c/;// n? 0或1个，相当于&#123;0,1&#125; var reg = /ab?c/// ^ 表示检查是否以紧跟字符串做为开头// $ 表示结尾 var reg = /^a/; // 以a开头 var reg = /a$/; // 以a结尾 var reg = /^a$/; //全匹配a// . 表示任意字符，要用以上特殊字符要用转移字符 \\. Summary: var reg&#x3D;xx; reg.text(“string”); See also1. References1.","tags":["js","RegEx"],"categories":["js"]},{"title":"初步尝试Bootstrap5和SASS","path":"/2023/12/09/2023-尝试Bootstrap5和SASS/","content":"Created: 2023-12-09Status: #H5 Recall: 安装LTS nodejs 安装国内定制的cnpm命令行工具 12npm install -g cnpm --registry=https://registry.npmmirror.comcnpm config set registry https://registry.npmmirror.com 开始安装相关管理包 –save-dev代表开发时使用，–save 生产应用程序所需的 12345npm initcnpm install sass --save-dev cnpm install bootstrap --savecnpm install @fortawesome/fontawesome-free --savecnpm install postcss postcss-cli autoprefixer 缩写 NPMv5后面可用缩写，默认save, -D&#x3D;–save-dev12345npm initcnpm i sass -D cnpm i bootstrapcnpm i @fortawesome/fontawesome-freecnpm i postcss postcss-cli autoprefixer Summary:See also1. References1.","tags":["nodejs","bootstrap","npm"],"categories":["nodejs"]},{"title":"Vscode Vim 一些操作","path":"/2023/11/10/2023-Vscode-Vim-一些操作/","content":"Created: 2023-11-10Status: #tool&#x2F;vim Recall: vim进行批量缩进编程用得较多的： v或ctrl+v进入可视块 使用j或k或数字+j或k进行行数选择分支一：shift-i进入插入模式进行操作分支二：3 shift+&gt; 向右缩进3个tab :622,629 6&gt;第622行到第629行向右缩进6个字符 ggVG&gt;整篇向右缩进","tags":["vim"],"categories":["devtool","vim"]},{"title":"WSL2安装自定义linux发行版如archlinux注意点和最佳实践（2022）","path":"/2022/12/10/2022-WSL2安装自定义linux发行版如archlinux注意点和最佳实践（2022）/","content":"Created: 2022-12-10 20:32:54Status: #linux 原因和安装思路好几年没折腾服务器，VM，Docker等东西。近期进行了知识更新。win11开始，hyperv偏windows和服务器内置vm模拟（我个人更喜欢更轻便的virtualbox运行旧系统），并且发现wsl2基本上已原生支持linux。但默认只能安装应用商店的unbuntu等系列，并且会把发行版默认安装在C盘。 我想测试用用Archlinux，并且想将这些发行版统一放到D盘。两种方式： 别人做好的ArchWSL，需要依赖别人更新，对我来说不利于理解WSL。 借助docker源自己安装导入。这里使用第二种方式。 为了操作简便，先安装ubuntu 应用商店安装，或是命令行：wsl --install -d Ubuntu安装完成后想怎么设置可以自己搜索 安装docker desktop，可以网页download安装或命令行：winget install Docker.DockerDesktop安装它，操作系统需要重启，重启后启动，需要确保General里面 Use the WSL 2 based engine勾选打上；并且Resources的WSL INTEGRATION里的Enable integration wth my default WSL distro勾选上，以及下面Ubuntu选上。 从docker上面拉需要的发行版，不仅是archlinux在docker desktop里操作或命令：docker pull archlinux 等待安装完成latestdocker create -i archlinux bash会出现很长一串字符，我们需前8位保存一下，后面导出有用，如: 739f913a启动这个dockerdocker container start 739f913a使用shell通过docker挂载过去docker exec -it 739f913a /bin/bash （archlinux专用）sudo pacman -S reflector 使用 1、需要全球最新：下载速度进行排序，并筛选出前 100 个最近同步的镜像，最后将结果覆写到 &#x2F;etc&#x2F;pacman.d&#x2F;mirrorlist 文件 sudo reflector --verbose --latest 100 --sort rate --save /etc/pacman.d/mirrorlist 2、国内常用的：选择在最近 同步的，并且是位于中国的12个镜像，然后根据下载速度进行排序，最后将结果覆写到 &#x2F;etc&#x2F;pacman.d&#x2F;mirrorlist 文件 sudo reflector --verbose -c China --latest 12 --sort rate --threads 100 --save /etc/pacman.d/mirrorlist docker默认把archlinux挂载成root后，需要初始化一下pacmankeypacman-key --init更新系统pacman -Syu安装sudo和vim等自己需要的软件pacman -Syu sudo vim 增加用户，useradd -m -G wheel usernamepasswd username用下面命令找到 %wheel ALL&#x3D;(ALL) ALL 反注释，并让wheel用户组可以sudoEDITOR=vim visudo退出archlinux bashexit 将linux发行版放到自己管理的目录我放在D盘的 D:\\Docker\\wslcd /mnt/d/Docker/wslmkdir archlinux 上面退出后当前位置在ubuntu linux中从docker导出当前发行版docker export 739f913a &gt; /mnt/d/Docker/wsl/archlinux.tar 退出ubuntu，现在 D:\\Docker\\wsl 目录上应该有archlinux.tar文件exit 导入tar文件到D:\\Docker\\wsl\\archlinux 目录$ wsl --import archlinux ./archlinux archlinux.tar重启windows Terminal终端，这时候终端应该能进入archlinux了，具体archlinux的其他设置请参考其他文章我们可以选择把docker desktop和Ubuntu都卸载掉或保留。 其他注意点使用systemdwsl默认使用windows自己的init，但wsl2最新版已支持systemd，有两种方式，一种是放到windows用户目录C:\\Users\\&lt;UserName&gt;\\.wslconfig；第二种就是放到linux发行版的&#x2F;etc&#x2F;wsl.conf里。 12[boot]systemd=true 或命令：echo -e &quot;[user] default=$myUsername&quot; &gt;&gt; /etc/wsl.conf用top命令查一下，如果pid 1 是systemd就OK，如果是init就说明没成功 想默认用某个用户登录可以在发行版linux里的&#x2F;etc&#x2F;wsl.conf里记录， 12[user]default=username 或在Windows终端Terminal的”设置”的Json文件里增加 123&quot;name&quot;: &quot;archlinux&quot;,&quot;source&quot;: &quot;Windows.Terminal.Wsl&quot;,&quot;commandline&quot;: &quot;wsl.exe -u teirdal -d archlinux&quot; 或启动的时候指定某个发行版用某个用户登录 1wsl -u root -d &lt;distro&gt; # &quot;-d &lt;distro&gt;&quot; is only needed for non-default instances wsl迁移当前ubuntu到其它目录的一些命令参考输入以下命令开始导出，需要保证磁盘有足够的空间，建议安装完发行版就立刻操作，大概需要1G左右空间存储压缩包。 wsl --export Ubuntu-20.04 wsl-ubuntu20.04.tar 导出完之后需要取消注册发行版 wsl --unregister Ubuntu-20.04 等待导出完成，这里以存储在D盘为例，执行以下代码开始导入。 wsl --import Ubuntu-20.04 D:\\Ubuntu-20.04 .\\wsl-ubuntu20.04.tar --version 2如果存储路径有空格就使用以下代码，将全路径加上单引号。 wsl --import Ubuntu-20.04 &#39;D:\\Program Files\\Ubuntu-20.04&#39; .\\wsl-ubuntu20.04.tar --version 2等待导入完成，这个时候登进去就是root账户，如果需要使用刚才你设置的用户执行以下代码ubuntu2004 config --default-user &lt;你的用户&gt;","tags":["linux","archlinux"],"categories":["linux","archlinux"]},{"title":"升级hexo到最新版","path":"/2022/08/26/2022-升级hexo到最新版/","content":"Created: 2022-08-26Status: #note&#x2F;hexo Recall:升级到win11后重装最新版node.js，连同相应的hexo也想升级到最新，查了一下已经是6.x，而我的还一直是5.x。 Summary:12345678910111213141516171819202122# 重装cnpm并更新淘宝源# 替换npmnpm i cnpm -g --registry=https://registry.npm.taobao.orgcnpm i cnpm -g # 升级自己到最新cnpm cache clean -f # 清楚缓存# 安装两个检查工具cnpm i npm-check -gcnpm i npm-upgrade -g# 进入blog目录，检查更新状态cd hexoblog # 进入blog目录npm-check # 检查之前安装的插件，都有哪些是可以升级的npm-upgrade # 升级modules插件# 仍在blog目录，更新hexo及所有插件cnpm update# 确认hexo已经更新hexo -v","tags":["hexo"],"categories":["知识点"]},{"title":"Markdown学习笔记","path":"/2020/12/29/2020-Markdown学习笔记/","content":"123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109## 可以转化为 HTML- Home- News```&lt;ul&gt; &lt;li&gt;Home&lt;/li&gt; &lt;li&gt;News&lt;/li&gt;&lt;/ul&gt;```## 无序列表及子列表- Home - News - Test - Test2- Sport## 自然段用空行换&lt;p&gt;自然段 1自然段 2## 段内加两空格换行自然段 1 自然段 2## 引用 blockquote 标记&gt; 引用字段## 分割线要用空行------------## 斜体_XXX_ _XXX_## 粗体**XXX** **XXX**## 列表- 无序列表 1 - 无序列表 2* 无序列表 31. 有序列表 12. 有序列表 23. 前面数字无所谓## 超链接http://www.163.com&lt;http://www.163.com&gt;[网易](http://www.173.com)[网易](http://www.173.com &quot;Title属性&quot;)## 代码高亮显示- 三个反单引号````javascriptfunction add(x, y) &#123; return x + y;&#125;```- 自然段中一个反单引号,html 的 code 代码测试段中用`add(x+y)`插入代码## 带点击链接图片显示```[&#123;% image 图片url 图片title %&#125;](内联点击)```## 表格显示使用`-`和`|`制作表格| TH1 | TH2 | TH3 |-|-|-|1|2|3||4|5|6|| 居左 | 居中 | 居右 |:-|:-:|-:|1|2|3||4|5|6|","tags":["markdown"],"categories":["知识点"]},{"title":"论韧带松紧不平衡","path":"/2015/09/20/2015-论韧带松紧不平衡/","content":"ABC三块骨，A和b间韧带紧B和C间韧带松，那么要练松A和B之间，就要先学会锁定B和C。除了韧带，控制人体活动的肌肉分伸肌和缩肌。也就是说要锻炼AB的伸肌力量外，还要锻炼BC的缩肌。所以同一个外形，内部肌肉运用不完全一样。体术修行最终都一样，就是越来越精细的控制力，减缓因失去控制力而粘连钙化。无论内家拳，芭蕾，还是瑜伽…","tags":["体术"],"categories":["修行","体术"]},{"title":"中兴红牛v5 android cm12.1 分辨率修改","path":"/2015/07/17/2015-中兴红牛v5-android-cm12-1-分辨率修改/","content":"本想玩 GTASA，听到有人说我的手机（红牛 v5 豪华版）显卡实际只能支持 540P 的游戏，所以想学学改下手机分辨率。学了，然并卵。因为又不想玩了，放着 PC 大游戏不玩简直蛋疼…比如正版的 150 多个 MOD 的 minecraft。 正题： cm12.1 可以修改 dpi：12240 540x960320 720x1280 默认值 听说没有这个选项的可能需要修改 system 里面的 build.prop，以编辑方式打开，找到 ro.sf.lcd_density&#x3D;320，改 240 安装终端模拟器12suam display-size 540x960 (然而对于cm12.1无用） 改为 1wm size 540x960 要改回来只需 1wm size reset","tags":["android"],"categories":["知识点"]},{"title":"msysGit 和 Git for Windows 的关系","path":"/2015/01/01/2015-msysGit-和-Git-for-Windows-的关系/","content":"The website git-scm.com is the official website for Git, the version control software. Originally written for Linux, the original software is only available as a source that doesn’t compile easily on Windows. msysGit it a project that uses MSYS (which is part of MinGW) to compile Git natively on Windows. They release the “Git for Windows” binaries which is the official release for Windows. Those are what you get when you download Git for Windows on git-scm.com. The msysGit project also releases “msysgit” binaries, which is essentially the full development environment required to build “Git for Windows”. The project was originally hosted on Google Code but later moved its project to GitHub and created a new project website there. If you are interested in using Git on Windows, all you need though is “Git for Windows” which you can either download from git-scm.com or from the Google Code download repository. Note that the files are usually called “preview” because the msysGit project does not offer full support for it. From personal experience with it, the project is very mature and definitely stable, so it’s perfectly fine to use it. Finally, “Git Bash” is the version of Bash that comes bundled with “Git for Windows” or more precisely with the underlying MSYS. It is required because a lot of Git is actually written as shell scripts (so Bash works as an interpreter for it) and simply so users have a fully compatible console to work with on Windows. Git Bash works even if you didn’t add the Git executables to your PATH during setup, although my usual recommendation is to add the Git executable (just the Git executable) to the PATH, so you can work with it from other shells (cmd.exe or PowerShell) and other programs can access it too.","tags":["git"],"categories":["知识点"]},{"title":"Slackware 14.1 安装日记（提高效率帖）","path":"/2013/12/06/2013-Slackware-14-1-安装笔记（提高效率帖）/","content":"Slackware社区近年终于给slackware文档机制做了一个不错的贡献，那就是docs.slackware.com，现在有了类似arch wiki的东西了，所以安装照理说应该没啥大问题了。 记录几点特殊的： 现在保持英文界面，看中文网页已经完全不需要配置就OK了；至于输入法，推荐上slackbuild自己转个fcitx来装，并slackpkg search并卸载掉scim，因为fcitx会在&#x2F;etc&#x2F;profile.d里面生成相应的modifier的sh文件供自动载入，以前需要手工的现在也不需要了，我们唯一需要改的就是local上改成UTF-8格式的。 如果想要google-chrome，也可以在slackbuild照要求拉，没必要去折腾chromium，windows上chrome还不是照用。原因如下：chromium需要申请一个api Key去编译，才能同步google账号，进行收藏夹同步等，没有了这个chrome基本上等同于废物，浏览器功能会大打折扣，而chromium对这个key管控其实挺严的，需要加入开发组去申请，普通使用真的没必要。 Chrome推荐几个插件，Adblock, goagent+Proxy SwitchySharp,以及最重要的Vimium，特别是Vimium，真正牛啊，H I J K移动页面，D&#x2F;U上下翻，还有一个特别好的功能是用键盘打开网址：F和shift + F，然后页面的链接上出现各种字母和组合，然后输该字母回车就打开网页，Shift+hjkl在网页间移动，x关页面，T新增标签页，至少效率上感觉比firefox高，除了胖客户javascript网站，其它所有网站包括淘宝基本都能完全用键盘操作，有些难关难开的页可以用chrome内置快捷键辅助。 Tilling windows manager 在linux社区有一个新宠： i3 wm，google Tech视频居然有专门的视频报道，估计是内部人开发的，也算一奇葩；也是纯快捷方式操作，mod+D，输入goo，回车自动联想打开google-chrome，大部分x程序都可以这样打开，如果觉得还不够快还能自己绑定进入i3时自启和快捷键。mod+回车自动打开terminal（Mod键设为windows键)，窗口间移动也是类似vim，mod+j,k,l,; 不用h做左移是因为mod+H就代表打开新的东西接下来会在水平右边新增，如果是mod+v，就是下面新增；然后Mod+1-9就是切换工作区，shift+mod+q就是kill掉当前窗口，shift+mod+E就是退出i3。 无线网络推荐使用wicd，在光盘的extra上有，它区别于networkmanager一个最大的好处是启动服务后，有一个console上的配置界面，wicd-curs…（没记住全名，自己tab），也就是说，设置好后，无线网络无论在X还是console都能用，再也不用依赖蛋疼的X上的manager去配置和连接网络。 只想到这么多，以后有再补充。","tags":["linux","slackware"],"categories":["linux","slackware"]},{"title":"windows下编辑的vimrc文件在unix下乱码","path":"/2013/04/07/2013-windows下编辑的vimrc文件在unix下乱码/","content":"尝试用git管理vim的配置文件并令其在windows和unix上面通用，结果碰到上面的问题，导致unix下面一打开vim就报配置文件错误。 一个方法是在console用这个命令 1sed -i &quot;s/\\r//&quot; ~/.vimrc 另一个办法是在.vimrc中加入 1:set ff=unix","tags":["vim"],"categories":["知识点"]},{"title":"archlinux x86_64 fluxbox chroumium rox setting with dropbox","path":"/2012/05/07/2012-archlinux-x86-64-fluxbox-chroumium-rox-setting-with-dropbox/","content":"dropbox 版本挺多的，官网不支持arch，源码编译要求太多，比如专门的文件管理器，AUR那个又下不来，气死我也。 最后找到它论坛上已编译好的，网址：http://forums.dropbox.com/topic.php?id=59297&amp;replies=193 直接解压后那个.dropbox-dist(记得前面有个点）目录就能用了，但非常不方便，dropbox默认不支持rox，而且xdg-open还打不开最新的chromium，解决方法如下： sudo cp -r .dropbox-dist &#x2F;opt locate xdg-open寻找xdg-open文件位置(locate命令见上一篇博客，在mlocate包里，先updatedb再locate，方便必装） sudo vim &#x2F;usr&#x2F;bin&#x2F;xdg-open 搜寻firefox字段，也就是 BROWSER &#x3D; firefox ….. 在&#x3D;号后面，firefox前面加上 chromium: 保存退出 这样，就算没有Nautilus这个工具，dropbox默认会用chromium打开网址（我只装了chromium) 但是这样用还是有点不爽，最好还是能跟rox文件管理器关联，所以一不做二不休 $ sudo touch &#x2F;usr&#x2F;bin&#x2F;nautilus &amp;&amp; sudo chmod +x &#x2F;usr&#x2F;bin&#x2F;nautilus &amp;&amp; sudo vim &#x2F;usr&#x2F;bin&#x2F;nautilus 建一个僵尸文件并改为可执行，在里面填入以下内容 #!&#x2F;bin&#x2F;bash exec rox $2 exit 0 再保存退出 给fluxbox的menu加上 [exec] (Dropbox) {~&#x2F;opt&#x2F;.dropbox-dist&#x2F;dropbox} 或是想进入fluxbox时启动也可以，修改.xinitrc 加入dropboxd 世界清净了。","tags":["linux","archlinux"],"categories":["linux","archlinux"]},{"title":"archlinux 2011.8.19 版安装和配置点滴","path":"/2012/05/05/2012-archlinux-2011-8-19-版安装和配置点滴/","content":"安装 1.使用core安装 2.安装设置中设置好IP、locale等，mirror使用sohu.com 3.安装完 pacman -Syu。发现不成功，查看官网news： a.pacman -S filesystem –force，因为filesystem-2011.12跟&#x2F;etc&#x2F;mtab冲突，手工删除不安全。原因是mtab是boot自动生成的，其它包并不使用它，所以改成filesystem软连接至&#x2F;proc&#x2F;self&#x2F;mounts,这样initscripts不再需要访问rootfs。 b.手工删除 &#x2F;etc&#x2F;profile.d&#x2F;locale.sh。新的filesystem可以使系统在locale更改后不用重启，只需要注销。 4.配置机器启动中弹出选单选择自动连接什么网络（网线或无线网）。 a.安装netcfg, wireless_tools, wpa_supplicant,wpa_actiond b.复制&#x2F;etc&#x2F;network.d&#x2F;examples里的配置文件&#x2F;etc&#x2F;network.d&#x2F;，改成自己的，可以多方案。 c.修改&#x2F;etc&#x2F;rc.conf,NETWORKS&#x3D;(mynetwork1 mynetwork2 …)或NETWORKS&#x3D;(menu)，第二个配置会在系统启动的时候出现一个选择对话框让你选择用什么网络链接，需要另安装dialog这个package；然后修改DAEMONS&#x3D;(… net-profiles …)。 d.安装dhclient，并在&#x2F;etc&#x2F;network.d&#x2F;的文件里面修改配置，在需要dhcp的配置里加上DHCLIENT&#x3D;yes就行了。其中发现问题： 我的ibm thinkpad x60无法在家里自动获取网线dhcp，怎么弄都不行但手工指定IP可以连，估计是dhcpcd问题，手工改为dhclient解决。最新版已经解决这个问题。 5.安装显卡驱动xf86-video-intel,安装mesa支持3d，其它调整以后再说6.安装 bash-completion,echo source &#x2F;etc&#x2F;bash_completion &gt;&gt;&#x2F;etc&#x2F;profile7.安装sudo 并 visudo8.新建用户9.安装xorgpacman -S xorg-server xorg-xinit xorg-utils xorg-server-utilspacman -S mesa 支持3Dpacman -S xorg-twm xorg-xclock xterm 测试环境 我试过先装fluxbox,其实可以不装这个10.安装触摸板pacman -S xf86-input-synaptics11.安装fluxbox并设置12.安装dbus,新版fcitx需要dbus支持13.安装设置fcitx14.安装chromium15.安装AUR最简单安装Yaourt的方式是添加Yaourt源至您的 &#x2F;etc&#x2F;pacman.conf:[archlinuxfr]Server &#x3D; http://repo.archlinux.fr/x86_64同步并安装：acman -Syu yaourt 16.配置pacman使用aria2进行多线程下载 pacman -S aria2在&#x2F;etc&#x2F;pacman.conf中加入以下代码： XferCommand &#x3D; &#x2F;usr&#x2F;bin&#x2F;aria2c -s 5 %u其中-s 5 表示使用5个线程，%u表示url代码 配置： 新版archlinux已经有flashplugin包，直接pacman安装 goagent配置 https://aur.archlinux.org/packages.php?ID=48201 上面下载tarball文件，解压，进入目录 先安装git pacman -S git然后 sumakepkg -s –asrootpacman -U goagent-git-xxxx-i686.pkg.tar.xz至于申请过程，跟windows上面一样，由于我在windows上一直有使用，所以只需要配置gogent就行了。 配置文件在&#x2F;etc&#x2F;goagent,修改[gae]下的appid和password然后编辑&#x2F;etc&#x2F;rc.conf DAEMONS&#x3D; ( … goagent …) 以后就可以开机自动启动了 当然也可以 sudo &#x2F;etc&#x2F;rc.d&#x2F;goagent start进行启动 chromium上面我的是自动同步 SwitchySharp过来的，没有的要自己安装，然后导入下面的配置： http://goagent.googlecode.com/files/SwitchyOptions.bak 3.fluxbox 背景轮换 pacman -S feh 如果没有安装，执行fbsetbg会提示你没有适当的图片浏览程序 打开 ~&#x2F;.fluxbox&#x2F;init文件 在session.screen0等条目下插入 session.screen.rootCommand: fbsetbg -c -f -r &#x2F;home&#x2F;photos&#x2F;favorites 然后把自己喜欢的背景图片扔到 &#x2F;home&#x2F;photos&#x2F;favorites目录下就行了 4.fluxbox半透明 pacman -S xcompmgr然后再编辑~&#x2F;.xinitrc加入 xcompmgr &amp; 就行了。不用再管什么rxvt不能透明等问题，上面的装上就行了，现代的电脑速度不可能连半透明都搞不定，除非是奔三时代的电脑。 conky安装 如上，装上后在~&#x2F;.xinitrc加入 conky &amp;。记住要在 startfluxbox前，配置自己搞了 英文locale下gvim中文显示问题 修改 ~&#x2F;.vimrc 加入 set fileencodings&#x3D;utf-8,gbk,ucs-bom,cp936 fluxbox主题中文化 我习惯先装这个软件 mlocate 这个软件，它有个好处，就是就算你不会grep它也能让你很快找到文件 命令为： pacman -S mlocateupdatedblocate theme.cfg 就像windows的索引服务，updatedb先建立一个所有文件目录的索引数据，然后locate直接在这个数据找文件 然后在你的主题目录下，一般在&#x2F;usr&#x2F;share&#x2F;fluxbox的多级子目录下找到theme.cfg这个文件 grep font theme.cfg *font: WenQuanYi BitMap Song-9:Bold menu.frame.font: sans-9:bold menu.title.font: sans-10:bold toolbar.clock.font: sans-9:bold toolbar.workspace.font: WenQuanYi BitMap Song-9:bold toolbar.iconbar.focused.font: WenQuanYi BitMap Song-9:bold toolbar.iconbar.unfocused.font: WenQuanYi BitMap Song-9 window.font: sans-8 修改里面的适当font为适当中文字体","tags":["linux","archlinux"],"categories":["linux","archlinux"]},{"title":"gma950调试xna4.0代码编译正常运行出错","path":"/2011/09/02/2011-gma950调试xna40代码编译正常运行出错/","content":"XNA 4.0 requires a minimum of SM 2.0. So by default the users running your game will need at minimum 2.0 to run. If you need something lower than 2.0 then you should use XNA 3.1. xna4.0项目默认设置是支持SM3.0，而gma950只支持到sm2.0。所以需要修改工程的属性。将Game Profile改为Reach就OK了。具体在代码级设置还没有看，估计也可以。","tags":["C#","XNA"],"categories":["点滴"]},{"title":"archlinux 启动错误: Error 15: File not found","path":"/2011/08/19/2011-archlinux-启动错误-Error-15-File-not-found/","content":"arch linux，使用2010.5月iso的netinstall安装，发现内核 3.0后grub启动不正常，开机启动显示： 12345678Booting &#x27;Arch Linux&#x27;root (hd0,0) Filesystem type is ext2fs, partition type 0x83kernel /vmlinuz26 root=/dev/sda6 ro vga=792 Error 15: File not found Press any key to continue... 在grub菜单中按e修改后进入系统修改&#x2F;boot&#x2F;grub&#x2F;menu.lst文件：vmlinuz26 修改为 vmlinuz-linux, kernel26.img 修改为 initramfs-linux.img。 kernel26-fallback.img 修改为 initramfs-linux-fallback.img","tags":["linux","archlinux"],"categories":["linux","archlinux"]},{"title":"SQL Server files (*.mdf) require SQL Server Express 2005 to function properly","path":"/2009/05/04/2009-SQL-Server-files-mdf-require-SQL-Server-Express-2005-to-function-properly/","content":"Installed tools:(VS 2008sp1, sql 2005 express, sql 2005 server, Asp.net MVC) Today when I was going to Add a new mdf database file, I got the following error: “Connections to SQL Server files (*.mdf) require SQL Server Express 2005 to function properly. Please verify the installation of the component …” After searching for google, the problem solved, here’s they are Navigate to “Tools” –&gt; “Option” –&gt; “Database Tools ” –&gt;“Data Connections -&gt;“SQL Server Instance Name (Blank for default): In the TextBox, I found it was “datasvr1” which is another computer’s name. Whatever I left it blank or changed it to “.&#x2F;SQLEXPRESS”, it didn’t work. Then I found another one says: “I then happened to notice in SQL Server Configuration Manager that the SQLEXPRESS SQL Server service showed “NT AUTHORITY&#x2F;NetworkService” under “Log On As” while MSSQLSERVER (the SQL Standard Edition service) showed LocalSystem. Right click on the SQLEXPRESS service, click Properties and then select Local System from the built-in account dropdown. Please note that in your situation using this account may not be an option due to security and&#x2F;or network connectivity.” Following the instruction he metioned, then I also found in the “SQL Native Client Configuration”, the alias name was also datasvr1, which must be Design1 in my situation. The problem still exist…. Finally I changed the data instance name in the Tools -&gt; Options….. of visual studio 2008 to SQLEXPRESS, without the prefix of “.&#x2F;”, All things went OK, haha.","tags":["SQLServer"],"categories":["知识点"]},{"title":"堆堆堆栈栈栈(.net)","path":"/2008/10/28/2008-堆堆堆栈栈栈-net/","content":"每次忘了都要去翻查书，麻烦死了。 Stack（堆栈，也就是栈），存的就是单纯的数值类型和类的引用名称 .net有个托管堆managed heap也叫heap，存的是类实例等 为啥叫managed heap呢？因为还有个叫垃圾收集器的东西，所以此heap不同于彼heap。为啥这样说？ 因为，假设有abcde5份连续的内存存在managed heap中，然后 b 和 d 都被释放了，传统heap就保持原样，下次分配内存的时候系统需要找到一个适合新东西放的空间。但是自从有了垃圾收集器之后，b和d一被释放，垃圾收集器就来做善后工作了，它吧c调到a后面，再把e调到c后面，所以ace又是连续的内存而b,d所释放的内存被放到了后面。 本说法出自《C#高级编程第4版》，英文版叫 《Professional C# 2005》。推荐看英文版，或是时间充足的话对照着看。中文版有些直译式中文，理解起来还不如直接看英文好。 补：自己对C,C++内存上问题的理解 你 int 一个 a，就在栈中分配了一个名称为a的空间int b，就接着a分配了b的空间普通值类型的分配都是连续的，都放在栈里，所以，程序结束后，内存是先释放b的空间，再释放a的空间，b没销毁，a永远在，这就是栈stack（也叫堆栈），先进后出。普通的堆，则在一列内存空间中选择能放下的放东西，它想进就进，用完就销毁。有人叫它先进先出，但是不准确。因为进去之后，不用它的时候就销毁，但是如果还在用，它就还在，跟别的内存块的产生于销毁没有直接关系。为啥说它性能不如栈？因为查找新空间需要消耗时间。 为啥说指针危险，因为无论是栈或是堆里面放的东西，你指着指着就跳没了，刚才的地址上的数据还在，就会出现资源回收的问题。 指针会出的资源溢出就是在于，空间没释放，内存会一直占用着，会出现几个问题：1.栈满了，你再放的东西太大，肯定溢出。 2.越界问题，取到了垃圾数据会使程序连锁反应般地胡乱计算。2.内存无休止增加，系统崩溃。","tags":["C#"],"categories":["知识点"]},{"title":"const static readonly等关键字的区别（欢迎高手指正我的总结）","path":"/2008/05/10/2008-const-static-readonly等关键字的区别（欢迎高手指正我的总结）/","content":"本文记录会非常凌乱乃至混乱，因为属于个人理解的思考图，属于C#关键字之间相互串接思考（还可能夹杂别的语言）。 const: 常量，编译时候确定。内存中，随着类型不同而存在heap,stack中。static: 对于类或类中，它不用被实例化就能使用。 （同时对于C++，这个时候它不能被extern）理解中它应该存在类似C那样的全局静态区中。readonly: 跟const很像，但是却必须在构造函数中定义。它只在类被实例化的时候才产生。（如果是类有静态构造函数，是否在编译的时候产生？）static const：编译时确定，如果在类中，不用实例化类就能使用。（放在heap中？）static readonly：到现在为止我所知道的，这个只用在在为了保证：在公有类中，定义一个static readonly field，它只在类实例化后一次确定，以后则不能更改。 C#在类中，变量和常量通常叫field，而使用get,set来完成变量赋值读取的就叫properties，跟methods又有不同。 此文不保证准确性，但希望随着以后的深入学习，我能够很准确地指出来。","tags":["C#"],"categories":["知识点"]},{"title":"C语言各个存储区的说明(转)","path":"/2008/03/25/2008-C语言各个存储区的说明-转/","content":"http://topic.csdn.net/t/20021130/11/1218592.html &#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F; &#x2F;&#x2F;Author: Lei Zhengdeng &#x2F;&#x2F;E-mail: &#108;&#x65;&#105;&#122;&#104;&#101;&#x6e;&#103;&#x64;&#101;&#x6e;&#103;&#x40;&#x31;&#x36;&#x33;&#46;&#110;&#x65;&#x74; &#x2F;&#x2F;HomePage: http://arden.3322.net &#x2F;&#x2F;Date: Mar 01, 2002 &#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F; 一般认为在c中分为这几个存储区 1栈 - 由编译器自动分配释放 2堆 - 一般由程序员分配释放，若程序员不释放，程序结束时可能由OS回收 3全局区（静态区），全局变量和静态变量的存储是放在一块的，初始化的全局变量和静态变量在一块区域，未初始化的全局变量和未初始化的静态变量在相邻的另一块区域。 - 程序结束释放 4另外还有一个专门放常量的地方。 - 程序结束释放 在函数体中定义的变量通常是在栈上，用malloc, calloc, realloc等分配内存的函数分配得到的就是在堆上。在所有函数体外定义的是全局量，加了static修饰符后不管在哪里都存放在全局区（静态区）,在所有函数体外定义的static变量表示在该文件中有效，不能extern到别的文件用，在函数体内定义的static表示只在该函数体内有效。另外，函数中的”adgfdf”这样的字符串存放在常量区。 比如： int a &#x3D; 0; 全局初始化区 char *p1; 全局未初始化区 main() { int b; 栈 char s[] &#x3D; “abc”;栈 char *p2; 栈 char *p3 &#x3D; “123456”; 123456&#x2F;0在常量区，p3在栈上。 static int c &#x3D;0； 全局（静态）初始化区 p1 &#x3D; (char *)malloc(10); p2 &#x3D; (char *)malloc(20); 分配得来得10和20字节的区域就在堆区。 strcpy(p1, “123456”); 123456&#x2F;0放在常量区，编译器可能会将它与p3所指向的”123456”优化成一块。 } 还有就是函数调用时会在栈上有一系列的保留现场及传递参数的操作。 栈的空间大小有限定，vc的缺省是2M。栈不够用的情况一般是程序中分配了大量数组和递归函数层次太深。有一点必须知道，当一个函数调用完返回后它会释放该函数中所有的栈空间。栈是由编译器自动管理的，不用你操心。 堆是动态分配内存的，并且你可以分配使用很大的内存。但是用不好会产生内存泄漏。并且频繁地malloc和free会产生内存碎片（有点类似磁盘碎片），因为c分配动态内存时是寻找匹配的内存的。而用栈则不会产生碎片。 char s1[] &#x3D; “aaaaaaaaaaaaaaa”; char *s2 &#x3D; “bbbbbbbbbbbbbbbbb”; aaaaaaaaaaa是在运行时刻符值的，而bbbbbbbbbbb是在编译时就确定的 但是，在以后的存取中，在栈上的数组比指针所指向的字符串(例如堆)快。 比如： #include &lt;stdio.h&gt; void main() { char a &#x3D; 1; char c[] &#x3D; “1234567890”; char *p &#x3D;”1234567890”; a &#x3D; c[1]; a &#x3D; p[1]; return; } 10: a &#x3D; c[1]; 00401067 8A 4D F1 mov cl,byte ptr [ebp-0Fh] 0040106A 88 4D FC mov byte ptr [ebp-4],cl 11: a &#x3D; p[1]; 0040106D 8B 55 EC mov edx,dword ptr [ebp-14h] 00401070 8A 42 01 mov al,byte ptr [edx+1] 00401073 88 45 FC mov byte ptr [ebp-4],al 第一种在读取时直接就把字符串中的元素读到寄存器cl中，而第二种则要先把指针值读到edx中，在根据edx读取字符，显然慢了。 一般大家说的堆栈和栈是一样的，就是栈(stack)，而说堆时才是堆heap. 栈是先入后出的，一般是由高地址向低地址生长。 相关的一个图： http://arden.3322.net/arrpnt.txt","tags":["C"],"categories":["知识点"]},{"title":"(windows)python脚本：自动备份并压缩文件，同时删除过期文件","path":"/2007/12/19/2007-windows-python脚本：自动备份并压缩文件，同时删除过期文件/","content":"（本文由Tengda huang 发表于 http://blog.csdn.net/cogent2001 ，该文章所提到的程序为原创，使用者可以任意引用，修改该程序。转载请注明出处，谢谢！） 近来忙东忙西，有些重复性的事务就懒得做，比如文件备份。不过不做也不行。这两天闲下来，现学现用python写了这个文件自动备份的脚本。 有以下2个亮点： 1.可以放在计划任务中定期执行，所需备份的内容由dsvr1list.txt文件提供，备份文件自动备份到按当前日期生成的目录中。 2.程序刚开始就执行清除1个月以前的所有备份目录，这个功能对于只有特定大小的备份设备及其有用，从此文件备份完全不用人工干涉。 代码很简单，该注释的我都注释了。需要注意的是，我安装的的是python 2.5.1，是否对其他版本的python兼容有待考查；压缩格式我选用7-zip，其中7z.exe是它的命令行程序，该软件为开源软件，并且压缩比应该算是同类软件中最高的。（经过我的测试，备份文件服务器上2.4G左右的东西，压缩后只剩不到900M）如果第一次安装python环境和7-zip软件，请为它们设置path变量，因为我的脚本里面假定它们可以在任何目录下执行。 12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758596061626364656667686970717273747576777879#!/usr/bin/python# Filename: bDatasvr1.py# This program is for files backup only# It also needs 7-zip as the compress tool.# Tengda huang, Dec 17th, 2007# ver 1.0import osimport timeimport distutils.dir_utilimport datetime# connecting to the remote computerlink_command = r&quot;net use k: //10.10.10.1/mysvr1 mypassword /user:backupUser&quot;print &#x27;Connecting to remote computer&#x27;if os.system(link_command) == 0: print &#x27;Successful connecting to drive k !&#x27;else: print &#x27;Drive k already linked or link failed!&#x27; # delete old directories and files if the dir name created by time is older than 30 daysfor root, dirs, files in os.walk(&#x27;k:&#x27;): for name in dirs: (y1, m1, d1) = (int(x) for x in name.split(&#x27;-&#x27;)) date1 = datetime.date(y1, m1, d1) datenow = time.strftime(&#x27;%Y%m%d&#x27;) y2 = int(datenow[:4]) m2 = int(datenow[4:6]) d2 = int(datenow[6:]) date2 = datetime.date(y2, m2, d2) if (date2 - date1).days &gt; 30: print &#x27;Expired dir! Deleting directory... &#x27;, name distutils.dir_util.remove_tree(os.path.join(&quot;k:&quot;,name))print &#x27;Old directory deleting done!&#x27;print &#x27;Starting to create backup files!&#x27;# 1. The files and directories to be backed up are specified in the list.source = r&#x27;@dsvr1list.txt&#x27;# 2. The backup must be stored in a main directory, # that is //10.10.10.1mysvr1# which mapped as drive k:target_dir = &#x27;k:&#x27; # 3. The files are compressed and backed up into a 7-zip file type.# The subdirectories are named by the current day time.today = target_dir + time.strftime(&#x27;%Y-%m-%d&#x27;)# The current time is the name of the zip archivenow = time.strftime(&#x27;%H%M%S&#x27;)# Create the subdirectory if it isn&#x27;t already thereif not os.path.exists(today): os.mkdir(today) # make directory print &#x27;Successfully created directory&#x27;, today# The name of the zip filetarget = today + os.sep + &#x27;share&#x27; + now + &#x27;.7z&#x27;# 5. Use the 7z command to compress and put the files in a 7z archivezip_command = &quot;7z a -t7z %s %s&quot; % (target, source)# Runing the backupif os.system(zip_command) == 0: print &#x27;Successful backup to&#x27;, targetelse: print &#x27;Backup FAILED&#x27; # Disconnect from the remote computer unlink_command = r&quot;net use k: /delete&quot;if os.system(unlink_command) == 0: print &#x27;Successfully detach from drive k! &#x27; print &#x27;All job done!&#x27;else: print &#x27;Backup FAILED&#x27;","tags":["python"],"categories":["python"]},{"title":"Slackware12 读写 ntfs分区 ( fuser + ntfs-3g)","path":"/2007/11/20/2007-Slackware12-读写-ntfs分区-fuser-ntfs-3g/","content":"近来才发现已经有稳定版的ntfs读写程序，而且slackware 12本身就有package了。这是我原先(slackware11)的&#x2F;etc&#x2F;fstab文件 &#x2F;dev&#x2F;hdc2 swap swap defaults 0 0&#x2F;dev&#x2F;hdc1 &#x2F; reiserfs defaults 1 1&#x2F;dev&#x2F;hdc4 &#x2F;usr reiserfs defaults 1 2&#x2F;dev&#x2F;hdc5 &#x2F;var reiserfs defaults 1 2&#x2F;dev&#x2F;hdc6 &#x2F;opt reiserfs defaults 1 2&#x2F;dev&#x2F;hdc7 &#x2F;home reiserfs defaults 1 2&#x2F;dev&#x2F;hda1 &#x2F;hda1 ntfs ro,iocharset&#x3D;gb2312,umask&#x3D;022 1 0&#x2F;dev&#x2F;hda5 &#x2F;hda2 ntfs ro,iocharset&#x3D;gb2312,umask&#x3D;022 1 0&#x2F;dev&#x2F;hda6 &#x2F;hda3 ntfs ro,iocharset&#x3D;gb2312,umask&#x3D;022 1 0&#x2F;dev&#x2F;hda7 &#x2F;hda4 ntfs ro,iocharset&#x3D;gb2312,umask&#x3D;022 1 0&#x2F;dev&#x2F;hdb1 &#x2F;hdb1 ntfs ro,iocharset&#x3D;gb2312,umask&#x3D;022 1 0&#x2F;dev&#x2F;hdb5 &#x2F;hdb2 ntfs ro,iocharset&#x3D;gb2312,umask&#x3D;022 1 0&#x2F;dev&#x2F;hdb6 &#x2F;hdb3 ntfs ro,iocharset&#x3D;gb2312,umask&#x3D;022 1 0&#x2F;dev&#x2F;cdrom &#x2F;mnt&#x2F;cdrom auto noauto,owner,ro 0 0&#x2F;dev&#x2F;fd0 &#x2F;mnt&#x2F;floppy auto noauto,owner 0 0devpts &#x2F;dev&#x2F;pts devpts gid&#x3D;5,mode&#x3D;620 0 0proc &#x2F;proc proc defaults 0 0 使用这个功能需要安装fuse和ntfs-3g两个包 123456789101112$su$slapt-get --update$slapt-get --search fuse......fuse-2.7.1-i486-1McD...........$slapt-get --install fuse$slapt-get --search ntfs-3g......ntfs-3g-1.1104-i486-1Mcd............$slapt-get --install ntfs-3g (注，其他系统用户可以自己找相关包，或是进入http://fuse.sourceforge.net/ 和 http://www.ntfs-3g.org/下载相应包自行编译) 现在我的&#x2F;etc&#x2F;fstab文件改成 &#x2F;dev&#x2F;hdc2 swap swap defaults 0 0&#x2F;dev&#x2F;hdc1 &#x2F; reiserfs defaults 1 1&#x2F;dev&#x2F;hdc4 &#x2F;usr reiserfs defaults 1 2&#x2F;dev&#x2F;hdc5 &#x2F;var reiserfs defaults 1 2&#x2F;dev&#x2F;hdc6 &#x2F;opt reiserfs defaults 1 2&#x2F;dev&#x2F;hdc7 &#x2F;home reiserfs defaults 1 2&#x2F;dev&#x2F;hda1 &#x2F;hda1 ntfs-3g umask&#x3D;0022,nls&#x3D;utf8 1 0&#x2F;dev&#x2F;hda5 &#x2F;hda2 ntfs-3g umask&#x3D;0022,nls&#x3D;utf8 1 0&#x2F;dev&#x2F;hda6 &#x2F;hda3 ntfs-3g umask&#x3D;0022,nls&#x3D;utf8 1 0&#x2F;dev&#x2F;hda7 &#x2F;hda4 ntfs-3g umask&#x3D;0022,nls&#x3D;utf8 1 0&#x2F;dev&#x2F;hdb1 &#x2F;hdb1 ntfs-3g umask&#x3D;0022,nls&#x3D;utf8 1 0&#x2F;dev&#x2F;hdb5 &#x2F;hdb2 ntfs-3g umask&#x3D;0022,nls&#x3D;utf8 1 0&#x2F;dev&#x2F;hdb6 &#x2F;hdb3 ntfs-3g umask&#x3D;0022,nls&#x3D;utf8 1 0&#x2F;dev&#x2F;cdrom &#x2F;mnt&#x2F;cdrom auto noauto,owner,ro 0 0&#x2F;dev&#x2F;fd0 &#x2F;mnt&#x2F;floppy auto noauto,owner 0 0devpts &#x2F;dev&#x2F;pts devpts gid&#x3D;5,mode&#x3D;620 0 0proc &#x2F;proc proc defaults 0 0 注意：1 ntfs格式改成 ntfs-3g2 umask使用 0022 这样进入&#x2F;mnt&#x2F;x 盘的时候，可以使用sudo来编辑文件，其他用户仍然只读3 iocharset 改成 nls，（这是我装上面两个文件之前，启动时提示使用新的格式nls），所以就顺便改了，因为我的slackware12使用en.us-utf8，所以相应目录编码也改成utf8","tags":["linux","slackware"],"categories":["linux","slackware"]},{"title":"Slackware安装MPlayer并基本支持firefox的流媒体播放(整理)","path":"/2007/11/15/2007-Slackware安装MPlayer并基本支持firefox的流媒体播放-整理/","content":"Slackware安装MPlayer并支持基本firefox的流媒体播放,可收听网络广播和直接流媒体网络电视. 此文前面部分整理自sixth的&lt;Slackware中MPlayer的手动安装方法&gt;,后面部分则是自己参考网上其他资料并设置完成的.(注:如没有特别说明,软件默认安装和目录拷贝可能需要管理员权限). Part I. Mplayer安装 1、到http://www.mplayerhq.hu/design7/dload.html下载所需要的包(*代表版本号)： essential-.tar.bz2 解码器包 MPlayer-.tar.bz2 mplayer软件包 Blue-*.tar.bz2 皮肤包 ## 2、安装解码器(以20071007的版本为依据,其他版本安装方法相同)： 12345 tar jxvf essential-20071007.tar.bz2 解压包 sudo mkdir /usr/lib/codecs 建立存放解码器的目录，如果有就不用建立了 sudo cp essential/* /usr/lib/codecs/ 将刚刚解压的解码器全部拷贝到codecs中。注：是文件，而不是解压后的目录，也就是你在/usr/lib/codecs/中看到的是essential中的文件 sudo chmod 644 /usr/lib/codecs/* 设置相关仅限 sudo chown root.root /usr/lib/codecs/* 3、安装mplayer软件包(rc1和rc2的安装方法有区别，对于configure的参数，详情请参看软件源码目录的README、INSTALL以及使用命令帮助.&#x2F;configure –help)： 1234 tar jxvf MPlayer-1.0rc2.tar.bz2　解压包 cd MPlayer-1.0rc2 ./configure --enable-gui --codecsdir=/usr/lib/codecs --win32codecsdir=/usr/lib/codecs --realcodecsdir=/usr/lib/codecs --disable-inet6 其中:–enable-gui　如果要带图形界面就必需带些参数，–codecsdir　设置解码器的位置，–win32codecsdir　设置win相关的解码器的位置，–realcodecsdir　设置real(realplayer)相关的解码器的位置 12 make sudo make install rc2版本不用再做任何改动。rc1版本可以将解压后MPlayer-1.0rc1 目录下面 codecs.conf gui.conf input.conf example.conf(我是拷贝所有.conf文件)拷到~&#x2F;.mplayer 下，并mv example.conf config 4、安装皮肤包： 1234 tar jxvf Blue-1.7.tar.bz2 sudo mv Blue /usr/local/share/mplayer/skins/ cd /usr/local/share/mplayer/skins/ ln -s Blue default 5、安装字幕等的相关字体： 把你想用的字体(如 simsun.ttf ，windows系统的字体目录下就有)拷贝到&#x2F;home&#x2F;&lt;你的用户名&gt;&#x2F;.mplayer 下(root用户放到&#x2F;root&#x2F;.mplayer下)并且改名为subfont.ttf. 我使用的是系统自带的&#x2F;usr&#x2F;share&#x2F;fonts&#x2F;TTF&#x2F;DejaVuSerif.ttf 1 sudo cp /usr/share/fonts/TTF/DejaVuSerif.ttf ~/.mplayer/subfont.ttf Part II. Mplayer Plugin安装,(此部分旨在安装mplayer支持firefox流媒体播放) 1、到http://mplayerplug-in.sourceforge.net/download.php下载最新版的 mplayerplug-in-*.tar.gz mplayerplug-in-3.45.tar.gz 2、编译软件(如果版本不同,请先vim查看README和INSTALL) 123456 tar zxvf mplayerplug-in-3.45.tar.gz cd mplayerplug-in ./configure make sudo cp *.xpt /usr/lib/firefox/components sudo cp *.so /usr/lib/firefox/plugins 重启firefox后，在地址栏输入about:plugins可查看插件安装情况 3、流媒体支持 在firefox地址栏输入about:config.在出现的界面空白处点右键，新建”string”,在弹出的框中输入network.protocol-handler.app.rtsp，回车。 在值项中输入mplayer的路径(Slackware中刚才mplayer的默认安装路径为&#x2F;usr&#x2F;local&#x2F;bin&#x2F;mplayer) 新建”string”，值项为network.protocol-handler.app.mms,值为mplayer的路径。","tags":["linux","slackware"],"categories":["linux","slackware"]},{"title":"slackware上 Eclipse + CDT + GTK2.0 编译环境设置","path":"/2007/08/15/2007-slackware上-Eclipse-CDT-GTK2-0-编译环境设置/","content":"Project -&gt; Property -&gt; C&#x2F;C++Build -&gt; Settings -&gt; Tab “Tool Setting” 上 GCC C Compiler -&gt; Miscellaneous 在Other flags里面的 -c -fmessage-length&#x3D;0 后面添加1`pkg-config --cflags --libs gtk + - 2.0 ` 2.GCC C Linker -&gt; Libraries在 Library search path(-L)里面添加1`pkg-config --cflags --libs gtk + - 2.0 ` 注意在Library search path里面添加后会多出双引号，选编辑然后把双引号去掉就行了","tags":["linux","slackware","eclipse"],"categories":["linux","slackware"]},{"title":"slackware 12.0 上安装AcroReader问题(expr:syntax error)","path":"/2007/08/14/2007-slackware12-0上安装AcroReader问题/","content":"打开”acroread” script（默认安装在&#x2F;usr&#x2F;local&#x2F;Adobe&#x2F;Acrobat 7.0&#x2F; ，或是任何你安装的目录） 输入 “&#x2F;“ 找到下面一行： 1echo $mfile| sed &#x27;s/libgtk-x11-([0-9]*).0.so.0.([0-9])00.([0-9]*)|(.*)/123/g&#x27; 3.替换为： 1echo $mfile| sed &#x27;s/libgtk-x11-/([0-9]*/).0.so.0./([0-9]/)00./([0-9]*/)/|/(.*/)//1/2/3/g&#x27; 也就是在第二个[0-9]后面添加个” * “","tags":["linux","slackware"],"categories":["linux","slackware"]},{"title":"linux管理常用命令搜集","path":"/2007/05/30/2007-linux管理常用命令搜集/","content":"id username 显示用户id，用户所在组id及所属其他用户组id who 显示登陆系统的用户 w who的增强命令，显示登陆系统的用户，正在做什么，以及他们处理器使用的情况，属于常用的安全方面的命令 finger username 显示用户的系统信息 last 显示最近登陆到系统的用户，经常作为系统安全检测的手段 lastb 显示最近不成功的登陆尝试 free 显示系统内存信息 more &#x2F;proc&#x2F;filesystems 显示当前正在使用的文件系统信息","tags":["linux"],"categories":["linux","common"]},{"title":"了解Linux的时钟(转自ChinaUnix.net)","path":"/2007/05/30/2007-了解Linux的时钟-转自ChinaUnix-net/","content":"http://linux.chinaunix.net/bbs/viewthread.php?tid=536442 由于Linux时钟和Windows时钟从概念的分类、使用到设置都有很大的不同，所以，搞清楚Linux时钟的工作方式与设置操作，不仅对于Linux初学者有着重大意义，而且对于使用Linux服务器的用户来说尤为重要。 Linux时钟的分类 Windows时钟大家可能十分熟悉了，Linux时钟在概念上类似Windows时钟显示当前系统时间，但在时钟分类和设置上却和Windows大相径庭。和Windows不同的是，Linux将时钟分为系统时钟(System Clock)和硬件(Real Time Clock，简称RTC)时钟两种。系统时间是指当前Linux Kernel中的时钟，而硬件时钟则是主板上由电池供电的那个主板硬件时钟，这个时钟可以在BIOS的“Standard BIOS Feture”项中进行设置。 既然Linux有两个时钟系统，那么大家所使用的Linux默认使用哪种时钟系统呢？会不回出现两种系统时钟冲突的情况呢？这些疑问和担心不无道理。首先，Linux并没有默认哪个时钟系统。当Linux启动时，硬件时钟会去读取系统时钟的设置，然后系统时钟就会独立于硬件运作。 从Linux启动过程来看，系统时钟和硬件时钟不会发生冲突，但Linux中的所有命令(包括函数)都是采用的系统时钟设置。不仅如此，系统时钟和硬件时钟还可以采用异步方式，见图1所示，即系统时间和硬件时间可以不同。这样做的好处对于普通用户意义不大，但对于Linux网络管理员却有很大的用处。例如，要将一个很大的网络中(跨越若干时区)的服务器同步，假如位于美国纽约的Linux服务器和北京的Linux服务器，其中一台服务器无须改变硬件时钟而只需临时设置一个系统时间，如要将北京服务器上的时间设置为纽约时间，两台服务器完成文件的同步后，再与原来的时钟同步一下即可。这样系统和硬件时钟就提供了更为灵活的操作。 设置Linux的时钟 在Linux中，用于时钟查看和设置的命令主要有date、hwclock和clock。其中，clock和hwclock用法相近，只不过clock命令除了支持x86硬件体系外，还支持Alpha硬件体系。由于目前绝大多数用户使用x86硬件体系，所以可以视这两个命令为一个命令来学习。 1.在虚拟终端中使用date命令来查看和设置系统时间 查看系统时钟的操作： # date 设置系统时钟的操作： # date 091713272003.30 通用的设置格式： # date 月日时分年.秒 2.使用hwclock或clock命令查看和设置硬件时钟 查看硬件时钟的操作： # hwclock –show 或 # clock –show 2003年09月17日 星期三 13时24分11秒 -0.482735 seconds 设置硬件时钟的操作： # hwclock –set –date&#x3D;”09&#x2F;17&#x2F;2003 13:26:00” 或者 # clock –set –date&#x3D;”09&#x2F;17&#x2F;2003 13:26:00” 通用的设置格式：hwclock&#x2F;clock –set –date&#x3D;“月&#x2F;日&#x2F;年 时：分：秒”。 3.同步系统时钟和硬件时钟 Linux系统(笔者使用的是Red Hat 8.0，其它系统没有做过实验)默认重启后，硬件时钟和系统时钟同步。如果不大方便重新启动的话(服务器通常很少重启)，使用clock或hwclock命令来同步系统时钟和硬件时钟。 硬件时钟与系统时钟同步： # hwclock –hctosys 或者 # clock –hctosys 上面命令中，–hctosys表示Hardware Clock to SYStem clock。 系统时钟和硬件时钟同步： # hwclock –systohc 或者 # clock –systohc 使用图形化系统设置工具设置时间 对于初学者来，笔者推荐使用图形化的时钟设置工具，如Red Hat 8.0中的日期与时间设置工具，可以在虚拟终端中键“redhat-config-time”命令，或者选择“K选单&#x2F;系统设置&#x2F;日期与时间”来启动日期时间设置工具。使用该工具不必考虑系统时间和硬件时间，只需从该对话框中设置日期时间，可同时设置、修改系统时钟和硬件时钟。 Internet同步时钟设置 在Windows XP日期与时间设置中有一项与Internet同步的功能，有了这项功能只要上网便可得到十分准确的时间。Red Hat 8.0也提供了这样的功能，在日期与时间设置工具对话框中的下部，有一个“启用网络时间协议”的选项，将该项选中就可以使用网络时间协议来同步Linux 系统时钟。选中该项后，其下面的服务器下拉列表框就变为可用状态，可从中选择一个时间服务器作为远程时间服务器。然后单击确定按钮，便可连接所设定的时间服务器，并与之同步时间。","tags":["linux"],"categories":["知识点"]},{"title":"在slackware 11.0为apache添加mod_python","path":"/2007/05/20/2007-在slackware-11-0为apache添加mod-python/","content":"python_mod 可以在apache网站下载：http://httpd.apache.org/modules/python-download.cgislackware 11.0内置apache为1.3版本，所以需要下载for 1.3版本的apache。我今天下载的版本是Mod_python 2.7.11(mod_python-2.7.11.tgz)。下载后 $tar zxvf mod_python-2.7.11.tgz$cd mod_python-2.7.11 在doc-html有安装和调试该模块的完整说明，在slackware 11.0我们只需要执行下面命令: 12345$./configure --with-apxs=/usr/sbin/apxs$make$su (我用的是普通用户，如果你用root用户，可以省略这一步）#make install#exit （如果普通用户su到root用户，现在可以退出，以下操作同这里） 这样，mod_python.so这个模块就编译好，并自动拷贝到 &#x2F;usr&#x2F;libexec&#x2F;apache&#x2F; 这个目录了（等会儿有用）。接下来编辑 &#x2F;etc&#x2F;apache&#x2F;httpd.conf文件，加入mod_python支持 12$su#vim /etc/apache/httpd.conf 打 &#x2F;LoadModule 回车找到LoadModule系列加载项位置，在已有的LoadModule项最上方添加LoadModule python_module libexec&#x2F;apache&#x2F;mod_python.so打 &#x2F;AddModule 回车找到AddModule系列加载项位置，在已有的AddModule项最上方添加AddModule mod_python.c再输入:wq保存文件#exit 注意!!!! python_mod文档提及一个问题：必须把mod_python加载项放在加载项最上方，不然会出错，文章中只是提及有些redhat用户反映如果随意添加在最下方apache会出错，slackware也一样。我刚开始就是放在httpd.conf文件最下方，居然也报错了，按照上面这个方法设置就正常。 至此mod_python算是安装完毕。","tags":["linux","slackware"],"categories":["linux","slackware"]},{"title":"slackware 11 简单服务器配置","path":"/2007/05/17/2007-slackware-11-简单服务器配置/","content":"slackware 11 系统默认的apache版本为1.3.37,php版本为4.4.4,mysql版本为5.0.24a. 1。apache篇slackware是个及其优秀的发行版，默认配置apache就可以工作了。这里只作少量修改让他支持PHP。 开启httpd服务，如果安装时候选择了httpd服务就不用理了。没有的话#chmod +x &#x2F;etc&#x2F;rc.d&#x2F;rc.httpd 修改httpd.confServerAdmin &#120;&#x78;&#64;&#109;&#x79;&#x6d;&#x61;&#105;&#x6c;&#46;&#99;&#111;&#109; (改为你的e－mail)ServerName 192.168.0.3 （有域名改成域名，没域名改为你的ip）DirectoryIndex index.html index.htm index.phpInclude &#x2F;etc&#x2F;apache&#x2F;mod_php.conf （开启php支持）Include &#x2F;etc&#x2F;apache&#x2F;mod_ssl.conf （开启ssl支持） 这是基本支持php的web服务器。业余玩玩还可以，安全性，高效性我不提供保证。因为我架webserver是个人玩的。 2.vsftp篇 修改&#x2F;etc&#x2F;vsftpd.confanonymous_enable&#x3D;YES ;开启匿名登陆write_enable&#x3D;YESanon_upload_enable&#x3D;YES ;开启匿名上传#anon_mkdir_write_enable&#x3D;YES ；匿名用户建文件夹权限，自己绝定是否开启chown_uploads&#x3D;YESchown_username&#x3D;sky ；这里改成你的用户名。呵呵不然别人上传的文件你没权限。ftpd_banner&#x3D;Welcome to blah FTP service. ；欢迎listen&#x3D;YES其他选项自己看着改 启动vsftpd#vsftpd &amp; vsftpd自启动修改&#x2F;etc&#x2F;rc.d&#x2F;rc.local添加#vsftpdvsftpd&amp; ok了！ftp目录下建立一个pub（发布，权限设为755），一个incoming（上传，权限设成777） 3.mysql篇 1.确认开启了mysqld服务，如果没有就#chmod +x &#x2F;etc&#x2F;rc.d&#x2F;rc.mysqld$su#su mysql$mysql_install_db2重启mysqld或者重启pc3设置mysql root 密码$su#su mysql$mysqladmin -u root password “你的密码”4建个db测试下$mysqladmin -u root -p create 数据库名输入你的密码5查看新建的db$mysqlshow -u root -p输入密码看见你刚才建的db了就ok了！6. 安装phpMyAdmin#tar jxvf phpMyAdmin-2.10.1-all-languages.tar.bz2#mv phpMyAdmin-2.10.1-all-languages phpMyAdmin#cp phpMyAdmin &#x2F;var&#x2F;www&#x2F;htdocs&#x2F;7.设置phpMyAdmin#cd &#x2F;var&#x2F;www&#x2F;htdocs&#x2F;phpMyadmin#mkdir config#chmod +rw config访问https://127.0.0.1/phpMyAdmin/scripts/setup.phpadd serverUser for config auth: rootPassword for config auth: rootupdatesave#cp config&#x2F;config.ini.php .&#x2F;测试访问https://127.0.0.1/phpMyAdmin/index.php，成功！","tags":["linux","slackware"],"categories":["linux","slackware"]},{"title":"slackware利用别的发行版中的RPM包安装软件","path":"/2007/05/17/2007-slackware利用别的发行版中的RPM包安装软件/","content":"最好还是通过命令转换成tgz格式的，然后再来安装，转换命令是：[root@sir wally]#rpm2tgz [RPM包的名字] 比如我想安装bmp-0.9.6-1.hamigua.i386.rpm 这包rpm包到Slackware系统中，应该先做一下转换[root@sir wally]#rpm2tgz bmp-0.9.6-1.hamigua.i386.rpm 转换成了什么呢？？[root@sir wally]#ls -la bmp-0.9.6-1.hamigua.i386.*-rw——- 1 wally users 1905568 2007-5-15 08:27 bmp-0.9.6-1.hamigua.i386.rpm-rw-r–r– 1 root root 1889866 2007-5-15 08:27 bmp-0.9.6-1.hamigua.i386.tgz 我们可以看到有个bmp-0.9.6-1.hamigua.i386.tgz的包 然后我们再用installpkg来安装这个包[root@sir wally]#installpkg bmp-0.9.6-1.hamigua.i386.tgz","tags":["linux","slackware"],"categories":["linux","slackware"]},{"title":"slackware 普通用户不能访问mount的分区","path":"/2007/05/17/2007-slackware-普通用户不能访问mount的分区/","content":"这是我的fstab的内容： 1234567891011121314151617 /dev/hdc2 swap swap defaults 0 0/dev/hdc1 / reiserfs defaults 1 1/dev/hdc4 /usr reiserfs defaults 1 2/dev/hdc5 /var reiserfs defaults 1 2/dev/hdc6 /opt reiserfs defaults 1 2/dev/hdc7 /home reiserfs defaults 1 2/dev/hda1 /hda1 ntfs ro , iocharset = gb2312 , umask = 022 1 0/dev/hda5 /hda2 ntfs ro , iocharset = gb2312 , umask = 022 1 0/dev/hda6 /hda3 ntfs ro , iocharset = gb2312 , umask = 022 1 0/dev/hda7 /hda4 ntfs ro , iocharset = gb2312 , umask = 022 1 0/dev/hdb1 /hdb1 ntfs ro , iocharset = gb2312 , umask = 022 1 0/dev/hdb5 /hdb2 ntfs ro , iocharset = gb2312 , umask = 022 1 0/dev/hdb6 /hdb3 ntfs ro , iocharset = gb2312 , umask = 022 1 0/dev/cdrom /mnt/cdrom auto noauto , owner , ro 0 0/dev/fd0 /mnt/floppy auto noauto , owner 0 0devpts /dev/pts devpts gid = 5 , mode = 620 0 0proc /proc proc defaults 0 0 关键就是那个umask参数：&#x2F;dev&#x2F;hda7 &#x2F;hda4 ntfs ro,iocharset&#x3D;gb2312,umask&#x3D;022 1 0 这样mount之后，&#x2F;hda4的权限就是drwxr-xr-x(即755)，普通用户也能访问了。同理，如果umask&#x3D;000，权限就变成drwxrwxrwx(即777)，任何人都可以为所欲为了","tags":["linux","slackware"],"categories":["linux","slackware"]},{"title":"slackware软件的安装和卸载","path":"/2007/05/17/2007-slackware软件的安装和卸载/","content":"1.我们如何安装单个软件包？ 方面主要有以下几种： 我们可以通过installpkg来安装，但软件包的文件格式必须是tgz的，比如下面： [root@sir wally]#installpkg bmp-0.9.6-1.hamigua.i386.tgz 也可以用pkgtool工具，这个也是比较好的办法。是图形界面的，也能卸载Slackware中的软件包。 [root@sir wally]#pkgtool 运行这个命令后，指定包的位置就可以来安装单个包，也可以卸掉某个包； 2.我怎么才能知道setup&#x2F;pkgtool&#x2F;installpkg安装软件包工具把软件都安装到什么地方了呢？ 我们应该查看&#x2F;var&#x2F;adm&#x2F;packages目录，所有的安装包信息都存放在这里，您可以用more来查看某个包安装在什么地方。比如我想知道gaim安装到什么地方了，用下面的办法就好 [root@sir wally]#more &#x2F;var&#x2F;adm&#x2F;packages&#x2F;gaim-0.74-i686-1dl 我们还可以查看某个软件包安装的脚本，安装脚本存放在&#x2F;var&#x2F;adm&#x2F;scripts，我们也可以用查看工具来查看某个包的安装脚本。 [wally@sir wally]$more &#x2F;var&#x2F;adm&#x2F;scripts&#x2F;gaim-0.74-i686-1dl 3.如何升级软件包呢？[root@sir wally]#upgradepkg 软件包文件名 比如我们升级gdm这个软件包，应该是这样的。 [root@sir wally]#upgradepkg gdm-2.4.4.5-i486-1.tgz 4如何卸掉一个软件包 [root@sir wally]#removepkg 软件包名 比如我们想卸掉gdm，应该如下做 [root@sir wally]#removepkg gdm","tags":["linux","slackware"],"categories":["linux","slackware"]},{"title":"First run of MySQL in my slacky","path":"/2006/08/14/2006-First-run-of-MySQL-in-my-slacky/","content":"I am getting this error at the time of booting of my machine and even if I want to run my mysql server by command prompt: Error : Starting mysqld daemon with databases from &#x2F;var&#x2F;lib&#x2F;mysqlSTOPPING server from pid file &#x2F;var&#x2F;run&#x2F;mysql&#x2F;mysql.pidmysql ended checked the file in &#x2F;etc&#x2F;rc.d&#x2F;rc.mysqld, as it stated, i have to type the following comand to create the databases because slackware 10.2 won’t do that for you(as a matter of fact, i like this DO-IT-BY-MYSELF ) su - mysqlmysql_install_db after that i get this announcement: PLEASE REMEMBER TO SET A PASSWORD FOR THE MySQL root USER !To do so, start the server, then issue the following commands:&#x2F;usr&#x2F;bin&#x2F;mysqladmin -u root -h slacky password ‘new-password’ i can now start MySQL daemon with &#x2F;usr&#x2F;bin&#x2F;mysqld_safe &amp;and i can set the root password now :)","tags":["linux","slackware"],"categories":["linux","slackware"]},{"title":"把windows的纯文本文件txt转为unix格式的文件","path":"/2006/07/30/2006-把windows的纯文本文件txt转为unix格式的文件/","content":"在windows顺手用记事本打了一个程序，拷贝到linux发现每一行后面都出现^M这个字符。今天刚好把vim编辑器的tutor看完，发现vi里面有一招可以解决这个问题。 :#,#s&#x2F;string1&#x2F;string2&#x2F;g #,# 表示从第几行到第几行之间s 表示替换文字&#x2F;string1 表示要替换的字符串&#x2F;string2 表示替换成的字符串&#x2F;g 加g与不加，在于判断是否整行执行，不加的话只替换当前行的第一个字符串 s 前面还能用通配符 %表示整个文档 所以，要转换txt文件到unix格式，只需要执行： $vim text.txt :%s&#x2F;^M&#x2F;&#x2F;g &#x2F;&#x2F;这里要输入^M，必须按 ctrl-v 然后回车:w newtest.txt &#x2F;&#x2F;保存为新文件，或直接 :wq退出就行了","tags":["slackware"],"categories":["linux","common"]},{"title":"slackware 安装手记","path":"/2006/05/28/2006-slackware-安装手记/","content":"1.光盘启动，回车开始系统，以root身份登陆，输入cfdisk进行硬盘分区，记得分一个swap分区(要修改它的分区格式为swap,即序号82)。如果需要，可以将&#x2F;home，&#x2F;var和&#x2F;usr&#x2F;local单独分出来，这样，当系统重做的时候，可以保留用户数据。2.输入setup，进入安装模式3.选择键盘，建立交换分区。4.选择要安装到那个分区，我直接将最大的区做 &#x2F; 分区。选择安装介质。记下自己的分区类型，比如：reiserfs或ext3。5.选择要安装的软件包，我是初学者，被建议选择full。6.配置modern，如果没有直接过。7.安装lilo,不安装就skip,安装就选simple,自动生成lilo.conf文件，建议的安装位置为mbr;如果你的boot所在分区分在primary盘的第一个sector开始的，建议安装在root.刚开始我使用visual PC虚拟机来模拟安装，直到熟悉了，才用一个单独的老硬盘装。8.选择hotplug，这样可以识别pci声卡9.设置dns，以后可以在&#x2F;etc&#x2F;resolv.conf上面添加更多的dns服务器10.其他配置","tags":["linux","slackware"],"categories":["linux","slackware"]}]